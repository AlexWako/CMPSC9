''' Stack
* Type of object that works by first in last out of a python list
* Created using a python list
* Big-O Analysis
    * push() : O(1)
    * pop() : O(1)
    * peek() : O(1)
'''

# Creating a stack
class Stack():
    def __init__(self):
        self.items = []
    
    def isEmpty(self):
        return self.items == []

    def push(self, item):
        return self.items.append(item)

    def pop(self):
        return self.items.pop()

    def peek(self):
        return self.items(len(self.items)-1)

    def size(self):
        return len(self.items)

def test_insertIntoStack():
    s = Stack()
    s.push("There")
    s.push("Hi")
    assert s.size() == 2
    assert s.peek() == "Hi"
    assert s.isEmpty() == False

def test_deleteFromStack():
    s = Stack()
    s.push("There")
    s.push("Hi")
    x = s.pop()
    assert x == "Hi"
    assert s.peek() == "There"
    assert s.size() == 1
    assert s.isEmpty() == False
    y = s.pop()
    assert y == "There"

''' Queue
* Type of object that works by first in first out
* Created using a python list
* Big-O analysis
    * enqueue() : O(n)
    * dequeue() : O(1)
'''

# Creating a Queue
class Queue:
	def __init__(self):
		self.items = []

	def isEmpty(self):
		return self.items == []

	def enqueue(self, item):
		self.items.insert(0, item)

	def dequeue(self):
		return self.items.pop()

	def size(self):
		return len(self.items)

def test_insertIntoQueue():
	q = Queue()
	assert q.isEmpty() == True
	assert q.size() == 0
	q.enqueue("Customer 1")
	q.enqueue("Customer 2")
	assert q.isEmpty() == False
	assert q.size() == 2
    
def test_removeFromQueue():
	q = Queue()
	q.enqueue("Customer 1")
	q.enqueue("Customer 2")
	assert q.dequeue() == "Customer 1"
	assert q.isEmpty() == False
	assert q.size() == 1
	assert q.dequeue() == "Customer 2"
	assert q.isEmpty() == True
	assert q.size() == 0

''' Deque
* Type of object that allows the insertion and removal from both ends
* Created using a python list
* Big-O analysis
    * addFront() : O(1)
    * addRear() : O(n)
    * removeFront() : O(1)
    * removeRear() : O(n)
'''
# Creating a Deque
class Deque:
	def __init__(self):
		self.items = []

	def isEmpty(self):
		return self.items == []

	def addFront(self, item):
		self.items.append(item)

	def addRear(self, item):
		self.items.insert(0, item)

	def removeFront(self):
		return self.items.pop()

	def removeRear(self):
		return self.items.pop(0)

	def size(self):
		return len(self.items)

def test_Deque():
	d = Deque()
	assert d.isEmpty() == True
	assert d.size() == 0
	d.addFront(10)
	d.addFront(20)
	d.addRear(30)
	d.addRear(40)
	assert d.isEmpty() == False
	assert d.size() == 4
	assert d.removeFront() == 20
	assert d.removeRear() == 40
	assert d.isEmpty() == False
	assert d.size() == 2
	assert d.removeRear() == 30
	assert d.removeRear() == 10
	assert d.isEmpty() == True
	assert d.size() == 0

''' Linked Lists
* Python lists are just one way to implement a List type structure
* The underlying strucutre of a Python list stores information in a CONTIGUOUS way
* There is another way to implement a List strucutre that performs better in certain operations (and worse
in others)
	* This way does not need organize data in contiguous memory, so maintaing the list strucutre doesn't
	need to shift elements around
* Linked Lists are list structures that is not stored in contiguous memory
	* But this strucutre still provides relative poisitioning of the data in the list
'''